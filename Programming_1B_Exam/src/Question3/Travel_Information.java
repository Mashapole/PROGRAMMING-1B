/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Question3;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class Travel_Information extends javax.swing.JFrame {

    /**
     * Creates new form Travel_Information
     */
    public Travel_Information() {
        initComponents();
        addTravel();
    }
    private File file= new File("travel.txt");
    
    private String line1, line2;
    public void addTravel() 
    {
        try 
        {
            line1=Files.readAllLines(Paths.get("travel.txt")).get(0);
            line2=Files.readAllLines(Paths.get("travel.txt")).get(1);
            
            //let's add to combo box
            cmdTransport.addItem(line1);
            cmdTransport.addItem(line2);
        } catch (IOException ex) 
        {
            Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbStart = new javax.swing.JComboBox<>();
        cmbEnd = new javax.swing.JComboBox<>();
        cmdTransport = new javax.swing.JComboBox<>();
        btnSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Travel Log");

        jLabel1.setText("Start Location:");

        jLabel2.setText("End Location");

        jLabel3.setText("Travel By");

        cmbStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cape Town", "Durban", "Port Elizabeth" }));

        cmbEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cape Town", "Durban", "Port Elizabeth" }));

        btnSubmit.setText("SUBMIT");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(84, 84, 84)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbStart, 0, 213, Short.MAX_VALUE)
                                    .addComponent(cmbEnd, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmdTransport, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmdTransport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSubmit)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    FileWriter out;
    BufferedWriter write;
    BufferedReader read;
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
       
        String start=cmbStart.getSelectedItem().toString();
        String end=cmbEnd.getSelectedItem().toString();
        
        if(start.equals("Cape Town") && end.equals("Cape Town"))
        {
         JOptionPane.showMessageDialog(rootPane, "Destination cannot be the same!!!");
        }
        if(start.equals("Durban") && end.equals("Durban"))
        {
         JOptionPane.showMessageDialog(rootPane, "Destination cannot be the same!!!");
        }
        if(start.equals("Port Elizabeth") && end.equals("Port Elizabeth"))
        {
         JOptionPane.showMessageDialog(rootPane, "Destination cannot be the same!!!");
        }

            
        String mess="", top="*********************************";
        String startD="",endD="",travelBy="";
        if(start.equals("Cape Town") && end.equals("Durban"))
        {
            try 
            {
                try
                {
                    out= new FileWriter(file, true);
                    write= new BufferedWriter(out);
                    
                    write.write("Destination 1: "+start+"\r\n");
                    write.write("Destination 2: "+end+"\r\n");
                    write.write("Travel By: "+cmdTransport.getSelectedItem()+"\r\n");
                    write.write("\r\n");
                    write.close();
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(rootPane, "Destination Is Saved");
                
                read=new BufferedReader(new FileReader(file));
                
                try 
                {
                    String line=read.readLine();
                    while(line!=null)
                    {
                            if(line.contains(start))
                            {
                                startD=line;
                            }
                            if(line.contains(end))
                            {
                                endD=line;
                            }
                            if(line.contains(cmdTransport.getSelectedItem().toString()))
                            {
                                 travelBy=line;
                            }
                            line=read.readLine();
                 
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                mess="TRAVEL LOG\n"+top+"\n"+startD+"\n"+endD+"\n"+travelBy+"\n"+top;
                jTextArea1.setText(mess);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        if(start.equals("Cape Town") && end.equals("Port Elizabeth"))
        {
            try 
            {
                try
                {
                    out= new FileWriter(file, true);
                    write= new BufferedWriter(out);
                    
                    write.write("Destination 1: "+start+"\r\n");
                    write.write("Destination 2: "+end+"\r\n");
                    write.write("Travel By: "+cmdTransport.getSelectedItem()+"\r\n");
                    write.write("\r\n");
                    write.close();
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(rootPane, "Destination Is Saved");
                
                read=new BufferedReader(new FileReader(file));
                
                try 
                {
                    String line=read.readLine();
                    while(line!=null)
                    {
                            if(line.contains(start))
                            {
                                startD=line;
                            }
                            if(line.contains(end))
                            {
                                endD=line;
                            }
                            if(line.contains(cmdTransport.getSelectedItem().toString()))
                            {
                                 travelBy=line;
                            }
                            line=read.readLine();
                 
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                mess="TRAVEL LOG\n"+top+"\n"+startD+"\n"+endD+"\n"+travelBy+"\n"+top;
                jTextArea1.setText(mess);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        
        
        //durban only
        if(start.equals("Durban") && end.equals("Cape Town"))
        {
            try 
            {
                try
                {
                    out= new FileWriter(file, true);
                    write= new BufferedWriter(out);
                    
                    write.write("Destination 1: "+start+"\r\n");
                    write.write("Destination 2: "+end+"\r\n");
                    write.write("Travel By: "+cmdTransport.getSelectedItem()+"\r\n");
                    write.write("\r\n");
                    write.close();
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(rootPane, "Destination Is Saved");
                
                read=new BufferedReader(new FileReader(file));
                
                try 
                {
                    String line=read.readLine();
                    while(line!=null)
                    {
                            if(line.contains(start))
                            {
                                startD=line;
                            }
                            if(line.contains(end))
                            {
                                endD=line;
                            }
                            if(line.contains(cmdTransport.getSelectedItem().toString()))
                            {
                                 travelBy=line;
                            }
                            line=read.readLine();
                 
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                mess="TRAVEL LOG\n"+top+"\n"+startD+"\n"+endD+"\n"+travelBy+"\n"+top;
                jTextArea1.setText(mess);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        if(start.equals("Durban") && end.equals("Port Elizabeth"))
        {
            try 
            {
                try
                {
                    out= new FileWriter(file, true);
                    write= new BufferedWriter(out);
                    
                    write.write("Destination 1: "+start+"\r\n");
                    write.write("Destination 2: "+end+"\r\n");
                    write.write("Travel By: "+cmdTransport.getSelectedItem()+"\r\n");
                    write.write("\r\n");
                    write.close();
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(rootPane, "Destination Is Saved");
                
                read=new BufferedReader(new FileReader(file));
                
                try 
                {
                    String line=read.readLine();
                    while(line!=null)
                    {
                            if(line.contains(start))
                            {
                                startD=line;
                            }
                            if(line.contains(end))
                            {
                                endD=line;
                            }
                            if(line.contains(cmdTransport.getSelectedItem().toString()))
                            {
                                 travelBy=line;
                            }
                            line=read.readLine();
                 
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                mess="TRAVEL LOG\n"+top+"\n"+startD+"\n"+endD+"\n"+travelBy+"\n"+top;
                jTextArea1.setText(mess);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        //Port Elizabeth
        
        if(start.equals("Port Elizabeth") && end.equals("Cape Town"))
        {
            try 
            {
                try
                {
                    out= new FileWriter(file, true);
                    write= new BufferedWriter(out);
                    
                    write.write("Destination 1: "+start+"\r\n");
                    write.write("Destination 2: "+end+"\r\n");
                    write.write("Travel By: "+cmdTransport.getSelectedItem()+"\r\n");
                    write.write("\r\n");
                    write.close();
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(rootPane, "Destination Is Saved");
                
                read=new BufferedReader(new FileReader(file));
                
                try 
                {
                    String line=read.readLine();
                    while(line!=null)
                    {
                            if(line.contains(start))
                            {
                                startD=line;
                            }
                            if(line.contains(end))
                            {
                                endD=line;
                            }
                            if(line.contains(cmdTransport.getSelectedItem().toString()))
                            {
                                 travelBy=line;
                            }
                            line=read.readLine();
                 
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                mess="TRAVEL LOG\n"+top+"\n"+startD+"\n"+endD+"\n"+travelBy+"\n"+top;
                jTextArea1.setText(mess);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        if(start.equals("Port Elizabeth") && end.equals("Durban"))
        {
            try 
            {
                try
                {
                    out= new FileWriter(file, true);
                    write= new BufferedWriter(out);
                    
                    write.write("Destination 1: "+start+"\r\n");
                    write.write("Destination 2: "+end+"\r\n");
                    write.write("Travel By: "+cmdTransport.getSelectedItem()+"\r\n");
                    write.write("\r\n");
                    write.close();
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(rootPane, "Destination Is Saved");
                
                read=new BufferedReader(new FileReader(file));
                
                try 
                {
                    String line=read.readLine();
                    while(line!=null)
                    {
                            if(line.contains(start))
                            {
                                startD=line;
                            }
                            if(line.contains(end))
                            {
                                endD=line;
                            }
                            if(line.contains(cmdTransport.getSelectedItem().toString()))
                            {
                                 travelBy=line;
                            }
                            line=read.readLine();
                 
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                mess="TRAVEL LOG\n"+top+"\n"+startD+"\n"+endD+"\n"+travelBy+"\n"+top;
                jTextArea1.setText(mess);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Travel_Information.class.getName()).log(Level.SEVERE, null, ex);
            }}
    }//GEN-LAST:event_btnSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Travel_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Travel_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Travel_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Travel_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() 
            {
                new Travel_Information().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cmbEnd;
    private javax.swing.JComboBox<String> cmbStart;
    private javax.swing.JComboBox<String> cmdTransport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
